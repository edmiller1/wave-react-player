{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/edwardmiller/Documents/React/react-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Player from \"./components/Player.js\";\nimport Song from \"./components/Song.js\";\nimport \"./styles/app.scss\";\nimport data from \"./util.js\";\nimport { useState, useRef } from \"react\";\nimport Library from \"./components/Library.js\";\nimport Nav from \"./components/Nav.js\";\n\nfunction App() {\n  _s();\n\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false); //Functions\n\n  const updateTime = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  }; //Ref\n\n\n  const audioRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      libraryStatus: libraryStatus,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: updateTime,\n      onTimeUpdate: updateTime,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vkxJGdpOeJNBL61X//B4aAS88XU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/edwardmiller/Documents/React/react-player/src/App.js"],"names":["Player","Song","data","useState","useRef","Library","Nav","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","libraryStatus","setLibraryStatus","updateTime","e","current","target","audioRef","audio"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACD,IAAI,EAAL,CAAlC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AACvCa,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;AAIA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,KAAD,CAAlD,CATa,CAUb;;AACA,QAAMiB,UAAU,GAAIC,CAAD,IAAO;AACxB,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASP,WAAzB;AACA,UAAMC,QAAQ,GAAGI,CAAC,CAACE,MAAF,CAASN,QAA1B;AACAF,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,WAAW,EAAEM,OAA5B;AAAqCL,MAAAA;AAArC,KAAD,CAAX;AACD,GAJD,CAXa,CAiBb;;;AACA,QAAMO,QAAQ,GAAGpB,MAAM,CAAC,IAAD,CAAvB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEc,aAApB;AAAmC,MAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEK,WADf;AAEE,MAAA,QAAQ,EAAED,QAFZ;AAGE,MAAA,QAAQ,EAAEU,QAHZ;AAIE,MAAA,SAAS,EAAEZ,SAJb;AAKE,MAAA,YAAY,EAAEC,YALhB;AAME,MAAA,WAAW,EAAEH;AANf;AAAA;AAAA;AAAA;AAAA,YAHF,eAWE,QAAC,OAAD;AACE,MAAA,aAAa,EAAEQ,aADjB;AAEE,MAAA,KAAK,EAAEV,KAFT;AAGE,MAAA,cAAc,EAAEG,cAHlB;AAIE,MAAA,QAAQ,EAAEa,QAJZ;AAKE,MAAA,SAAS,EAAEZ,SALb;AAME,MAAA,QAAQ,EAAEH;AANZ;AAAA;AAAA;AAAA;AAAA,YAXF,eAmBE;AACE,MAAA,gBAAgB,EAAEW,UADpB;AAEE,MAAA,YAAY,EAAEA,UAFhB;AAGE,MAAA,GAAG,EAAEI,QAHP;AAIE,MAAA,GAAG,EAAEd,WAAW,CAACe;AAJnB;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GA/CQlB,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import Player from \"./components/Player.js\";\nimport Song from \"./components/Song.js\";\nimport \"./styles/app.scss\";\nimport data from \"./util.js\";\nimport { useState, useRef } from \"react\";\nimport Library from \"./components/Library.js\";\nimport Nav from \"./components/Nav.js\";\n\nfunction App() {\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  //Functions\n  const updateTime = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo, currentTime: current, duration });\n  };\n\n  //Ref\n  const audioRef = useRef(null);\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n      />\n      <Library\n        libraryStatus={libraryStatus}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n      />\n      <audio\n        onLoadedMetadata={updateTime}\n        onTimeUpdate={updateTime}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}