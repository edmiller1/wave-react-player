{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/edwardmiller/Documents/React/react-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Player from \"./components/Player.js\";\nimport Song from \"./components/Song.js\";\nimport \"./styles/app.scss\";\nimport data from \"./util.js\";\nimport { useState, useRef } from \"react\";\nimport Library from \"./components/Library.js\";\n\nfunction App() {\n  _s();\n\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //Ref\n\n  const audioRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: updateTime,\n      onTimeUpdate: updateTime,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iN+lkj4FIn8PEr/FblQZSrg2uN8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/edwardmiller/Documents/React/react-player/src/App.js"],"names":["Player","Song","data","useState","useRef","Library","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","audioRef","updateTime","audio"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACD,IAAI,EAAL,CAAlC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAACI,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C,CAJa,CAMb;;AACA,QAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAD,CAAvB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEK;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAEI,QADZ;AAEE,MAAA,SAAS,EAAEF,SAFb;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAIE,MAAA,WAAW,EAAEH;AAJf;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,cAAc,EAAEG,cAFlB;AAGE,MAAA,QAAQ,EAAEG;AAHZ;AAAA;AAAA;AAAA;AAAA,YARF,eAaE;AACE,MAAA,gBAAgB,EAAEC,UADpB;AAEE,MAAA,YAAY,EAAEA,UAFhB;AAGE,MAAA,GAAG,EAAED,QAHP;AAIE,MAAA,GAAG,EAAEJ,WAAW,CAACM;AAJnB;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA9BQT,G;;KAAAA,G;AAgCT,eAAeA,GAAf","sourcesContent":["import Player from \"./components/Player.js\";\nimport Song from \"./components/Song.js\";\nimport \"./styles/app.scss\";\nimport data from \"./util.js\";\nimport { useState, useRef } from \"react\";\nimport Library from \"./components/Library.js\";\n\nfunction App() {\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  //Ref\n  const audioRef = useRef(null);\n  return (\n    <div className=\"App\">\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n      />\n      <Library\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n      />\n      <audio\n        onLoadedMetadata={updateTime}\n        onTimeUpdate={updateTime}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}